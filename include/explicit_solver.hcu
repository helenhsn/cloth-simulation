#ifndef EXPLICIT_SOLVER_H
#define EXPLICIT_SOLVER_H

#include "mesh.hcu"
#include "glm/glm.hpp"
#include "solver.h"

using namespace std;


__device__ __host__ float dot(glm::vec3 a, glm::vec3 b)
{
    return a.x*b.x + a.y*b.y + a.z*b.z;
}


__device__ __host__ glm::vec3 normalize(glm::vec3 v)
{
    float res = dot(v, v);
    if (res < 0.0000001) return v;
    return v/sqrt(res);
}
__device__ glm::vec3 cross(glm::vec3 a, glm::vec3 b)
{
    glm::vec3 res = glm::vec3(a.y*b.z - a.z*b.y, a.z*b.x - a.x*b.z, a.x*b.y - a.y*b.y);
    return normalize(res);
}
__device__ bool is_corner(int k, int N)
{
    return k == 0 || k == (N*N-1) || k == (N*(N-1)) || k == (N-1);
}

__device__ void atomicadd(glm::vec3 *tab, int idx, glm::vec3 val, int seed)
{
    int offset1 = seed % 3;
    int offset2 = (seed + 1) % 3;
    int offset3 = (seed + 2) % 3;
    atomicAdd(&(tab[idx].x) + offset1, val[offset1]);
    atomicAdd(&(tab[idx].x) + offset2, val[offset2]);
    atomicAdd(&(tab[idx].x) + offset3, val[offset3]);
}

__device__ glm::vec3 computeSpringForces(bool isStretchSpring, bool isAFixed, bool isBFixed, int i, int j, glm::vec3 x_i, glm::vec3 v_i, glm::vec3 x_j, glm::vec3 v_j, float L, float Ks, float Kd)
{
    glm::vec3 diff_xij = x_j - x_i;
    float length_xij  = sqrt(dot(diff_xij, diff_xij));
    glm::vec3 dir_xij = diff_xij/length_xij;

    float spring = Ks*(length_xij - L);
    float damping = Kd*dot(v_j-v_i, dir_xij);

    // printf("\n\n nÂ°%i : SPRING = %f // DAMPING = %f  ", i, spring, damping);
    float correction = 0.0;
    float tau_c = 0.1;
    float shrinking = (length_xij - L)/L;
    if (isStretchSpring && shrinking > tau_c)
    {
        correction = Ks*(1.0 - (1.0+tau_c) * L / length_xij);
        // if first point && second point are not fixed
        if (!isAFixed && !isBFixed) correction *= 0.5;

    }
    glm::vec3 total = (spring + correction + damping)*dir_xij;

    return total;
}


__global__ void updateInternalForces(bool isStretchSpring, int maxTid, int N, glm::ivec2 *springIds, glm::vec3 *xIter, glm::vec3 *vIter, glm::vec3 *FIter, float L, float Ks, float Kd)
{
    int j = threadIdx.x + blockIdx.x*blockDim.x;
    int i = threadIdx.y + blockIdx.y*blockDim.y;
    int tid = j*N+i;

    if (tid < maxTid)
    {
        glm::ivec2 ids = springIds[tid];
        bool isAFixed = (ids.x % 128 == 0);
        bool isBFixed = (ids.y % 128 == 0);
        glm::vec3 fSpring = computeSpringForces(isStretchSpring, isAFixed, isBFixed, ids.x, ids.y, xIter[ids.x], vIter[ids.x], xIter[ids.y], vIter[ids.y], L, Ks, Kd);

        float *addA = &FIter[ids.x].x;
        float *addB = &FIter[ids.y].x;

        atomicAdd(addA, fSpring.x);
        atomicAdd(addA + 1, fSpring.y);
        atomicAdd(addA + 2, fSpring.z);

        atomicAdd(addB, -fSpring.x);
        atomicAdd(addB + 1, -fSpring.y);
        atomicAdd(addB + 2, -fSpring.z);

    }



}

__global__ void updateIterBuffers(int maxTid, int N, float kOffset, float yOffset, glm::vec3 *x, glm::vec3 *v, glm::vec3 *xIter, glm::vec3 *vIter, glm::vec3 *FIter, glm::vec3 *vIterAcc, float m)
{
    /**
     * Initializes the 2 buffers used for computing RK4 iterations 
    */

    // TODO use shared mem
    int j = threadIdx.x + blockIdx.x*blockDim.x;
    int i = threadIdx.y + blockIdx.y*blockDim.y;

    int tid = j*N+i;

    if (tid < maxTid)
    {

        float fixedFactor = 0.0;
        if (i !=0)
        {
            fixedFactor = 1.0;
        }
        xIter[tid] = x[tid] + fixedFactor * yOffset * vIter[tid]; // offset x
        vIter[tid] = v[tid] + fixedFactor * yOffset * FIter[tid]/m; // xDot1,2,3,4

        vIterAcc[tid] += kOffset * vIter[tid];
        FIter[tid] = glm::vec3(0.0);
    }

}

__global__ void updateExternalForces(int maxTid, int N, float kOffset, glm::vec3 *xIter, glm::vec3 *vIter, glm::vec3 *FIter, glm::vec3 *FIterAcc, glm::vec3 *n, float m, glm::vec3 absWind, glm::vec3 normWind, glm::vec3 gravity, float Ka)
{
    int j = threadIdx.x + blockIdx.x*blockDim.x;
    int i = threadIdx.y + blockIdx.y*blockDim.y;

    int tid = j*N+i;

    if (tid < maxTid)
    {
        int N_m1 = N-1;

        glm::vec3 shear_vec1 = j == N_m1? xIter[tid] - xIter[tid-N] : xIter[tid+N] - xIter[tid]; // right vec
        glm::vec3 shear_vec2 = i == N_m1? xIter[tid-1] - xIter[tid] : xIter[tid] - xIter[tid+1]; // bottom up vec
        glm::vec3 normal = cross(shear_vec1, shear_vec2);

        n[tid] = normal;


        FIter[tid] += dot(abs(normal), absWind)*normWind + gravity - Ka*vIter[tid]; // external forces : wind force + gravity force + friction force

        FIterAcc[tid] += kOffset * FIter[tid];

        
    }
}

__global__ void updateScheme(int maxTid, int N, glm::vec3 *x, glm::vec3 *v, glm::vec3 *vIterAcc, glm::vec3 *FIterAcc, float h, float m)
{
    int j = threadIdx.x + blockIdx.x*blockDim.x;
    int i = threadIdx.y + blockIdx.y*blockDim.y;

    int tid = j*N+i;

    if (tid < maxTid)
    {

        // using Verlet integration scheme
        glm::vec3 last_pos = x[tid];

        if (i != 0) 
        {
            // RK4 
            x[tid] = x[tid] + h*vIterAcc[tid]/6.0f;
            v[tid] = v[tid] + h*FIterAcc[tid]/(6.0f*m);
        }

        // reset buffers
        FIterAcc[tid] = glm::vec3(0.0);
        vIterAcc[tid] = glm::vec3(0.0);
    }

}



__global__ void initScheme(int maxTid, glm::vec3 *v, glm::vec3 *xIter, glm::vec3 *vIter, glm::vec3 *FIter, glm::vec3 *vIterAcc, glm::vec3 *FIterAcc, int N)
{
    int j = threadIdx.x + blockIdx.x*blockDim.x;
    int i = threadIdx.y + blockIdx.y*blockDim.y;

    int tid = j*N+i;

    if (tid < maxTid)
    {       
        v[tid] = glm::vec3(0.0);
        FIter[tid] = glm::vec3(0.0);
        vIterAcc[tid] = glm::vec3(0.0);
        vIter[tid] = glm::vec3(0.0);
        xIter[tid] = glm::vec3(0.0);
        FIterAcc[tid] = glm::vec3(0.0);

    }
}

struct SpringData
{
    std::vector<glm::ivec2> indices;
    
    // Cuda calls var
    glm::ivec2 *indicesCudaPtr;
    int sqrtN;
    dim3 gridSize;

    float restLength;
};

class ExplicitSolver: public Solver
{
    private:

    float m_Ks;
    float m_Kd;
    float m_unitM;
    glm::vec3 m_wind;
    glm::vec3 m_windNormed;
    glm::vec3 m_gravity;
    float *m_windUI;
    float m_Ka;

    int m_sqrtNRound;

    // data structures
    SpringData *m_springs;
    dim3 m_gridSizeScheme;
    dim3 m_blockSize;

    // RK4 buffers
    glm::vec3 *m_V; // current velocity for each particle
    glm::vec3 *m_xIter;
    glm::vec3 *m_vIter;
    glm::vec3 *m_vIterAcc;
    glm::vec3 *m_FIter; // sum of forces for each particle
    glm::vec3 *m_FIterAcc;

    ExplicitSolver(const ExplicitSolver &other);
    ExplicitSolver& operator=(const ExplicitSolver &other);

    void initSprings(const int &N, const float &L)
    {
        int N_minus_1 = N-1;
        int N_minus_2 = N-2;

        m_springs = new SpringData[4];
        float stretch_L(sqrt(2.0*L*L));
        float bend_L(2.0*L);
        float bendDiag_L(2.0*stretch_L);
        float restLengths[4] = {L, stretch_L, bend_L, bendDiag_L};

        // filling the data structure going from squares of length=2
        for (int j = 0; j <N; ++j)
        {
            for (int i = 0; i<N; ++i)
            {
                int id = j*N+i;

                // add structural springs id & length
                if (j < N_minus_1) m_springs[0].indices.push_back(glm::ivec2(id, id+N)); // right spring
                if (i < N_minus_1) m_springs[0].indices.push_back(glm::ivec2(id, id+1)); // bottom spring


                // add stretch springs id & length
                if (i < N_minus_1 && j < N_minus_1) m_springs[1].indices.push_back(glm::ivec2(id, id+N+1)); // 1st diag spring
                if (i > 0 && j < N_minus_1) m_springs[1].indices.push_back(glm::ivec2(id, id+N-1)); // 2nd diag spring

                // adding bend springs
                if (j < N_minus_2) m_springs[2].indices.push_back(glm::ivec2(id, id+2*N)); // right bend spring
                if (i < N_minus_2) m_springs[2].indices.push_back(glm::ivec2(id, id+2)); // bottom bend spring

                if (i < N_minus_2 && j < N_minus_2) m_springs[3].indices.push_back(glm::ivec2(id, id + 2*N + 2)); // 1st diag bend spring
                if (i > 1 && j < N_minus_2) m_springs[3].indices.push_back(glm::ivec2(id, id+2*N-2)); // 2nd diag bend spring

            }
        }

        for (int i=0; i<4; ++i)
        {   
            SpringData *spring = &m_springs[i];
            cudaErrorCheck(cudaMalloc((void **) &spring->indicesCudaPtr, sizeof(glm::ivec2)*spring->indices.size()));
            cudaErrorCheck(cudaMemcpy(spring->indicesCudaPtr, spring->indices.data(), sizeof(glm::ivec2)*spring->indices.size(), cudaMemcpyHostToDevice));
            m_springs[i].sqrtN = int(ceil(sqrt(spring->indices.size())));
            m_springs[i].restLength = restLengths[i];
            m_springs[i].gridSize = dim3((m_springs[i].sqrtN + 31)/32, (m_springs[i].sqrtN + 31)/32, 1);
        } 
    }

    void updateSpringForces(Plane *grid)
    {
        std::cout << "\n\n UPDATE ==========!!!!!!!!!!!" << std::endl;

        for (int i=0; i<4; ++i)
        {
            SpringData spring = m_springs[i];
            updateInternalForces<<<spring.gridSize, m_blockSize>>>(true, spring.indices.size(), spring.sqrtN, spring.indicesCudaPtr, m_xIter, m_vIter, m_FIter, spring.restLength, m_Ks, m_Kd);
        }
        
        cudaErrorCheck(cudaDeviceSynchronize());
        
    }

    void updateRK4(Plane *grid, float kOffset, float yOffset)
    {

        // INIT SUB ITERATION BUFFERS FOR POSITION AND VELOCITY (y = y + yOffset * k)

        updateIterBuffers<<<m_gridSizeScheme, m_blockSize>>>(
            grid->getVerticesNb(), 
            grid->N(), 
            kOffset, 
            yOffset, 
            (glm::vec3 *) grid->getDataPtr(0), 
            m_V, 
            m_xIter, 
            m_vIter, 
            m_FIter, 
            m_vIterAcc, 
            m_unitM
            );

        cudaErrorCheck(cudaDeviceSynchronize());

        updateSpringForces(grid);

        updateExternalForces<<<m_gridSizeScheme, m_blockSize>>>(
            grid->getVerticesNb(), 
            grid->N(),
            kOffset, 
            m_xIter, 
            m_vIter, 
            m_FIter, 
            m_FIterAcc, 
            (glm::vec3 *) grid->getDataPtr(1), 
            m_unitM, 
            m_wind, 
            m_windNormed, 
            m_gravity, 
            m_Ka 
            );
        cudaErrorCheck(cudaDeviceSynchronize());
    }

    void runRK4Iterations(Plane *grid)
    {

        // compute k1, k2, k3 and k4 iterations of RK4 algorithm
        updateRK4(grid, 1.0, 0.0);
        updateRK4(grid, 2.0, m_timeStep*0.5);
        updateRK4(grid, 2.0, m_timeStep*0.5);
        updateRK4(grid, 1.0, m_timeStep);

    }

    public:

    ~ExplicitSolver()
    {
        cudaFree(m_xIter);
        cudaFree(m_vIter);
        cudaFree(m_vIterAcc);
        cudaFree(m_FIter);
        cudaFree(m_FIterAcc);
        cudaFree(m_V);
        for (int i=0; i<4; ++i)
        {
            cudaFree(m_springs[i].indicesCudaPtr);
        };
        delete m_springs;
    };

    float *Ks() {return &m_Ks;};
    float *Kd() {return &m_Kd;};
    float *Ka() {return &m_Ka;};
    float *m() {return &m_unitM;};
    float *L() {return &m_springs[0].restLength;};
    float *wind() 
    {
        for (int i = 0; i<3; ++i)
            m_windUI[i] = m_wind[i];
        return m_windUI;
    };
    

    ExplicitSolver(Plane *grid) : 
    Solver(0.01f),
    m_Ks(400.0), 
    m_Kd(1.0), 
    m_Ka(0.2), 
    m_unitM(1.0), 
    m_wind(glm::vec3(0.0f)),
    m_gravity(glm::vec3(0.0f, -9.81f*m_unitM, 0.0f))
    {
        m_windUI = new float[3]; 
        wind();
        
        std::cout << "N = " << grid->N() << " && NB DE PTS :" << grid->getVerticesNb() << std::endl << std::flush ;
        
        // solver's buffers allocation
        cudaErrorCheck(cudaMalloc((void **) &m_V, sizeof(glm::vec3)*grid->getVerticesNb()));
        cudaErrorCheck(cudaMalloc((void **) &m_xIter, sizeof(glm::vec3)*grid->getVerticesNb()));
        cudaErrorCheck(cudaMalloc((void **) &m_vIter, sizeof(glm::vec3)*grid->getVerticesNb()));
        cudaErrorCheck(cudaMalloc((void **) &m_FIter, sizeof(glm::vec3)*grid->getVerticesNb()));
        cudaErrorCheck(cudaMalloc((void **) &m_vIterAcc, sizeof(glm::vec3)*grid->getVerticesNb()));
        cudaErrorCheck(cudaMalloc((void **) &m_FIterAcc, sizeof(glm::vec3)*grid->getVerticesNb()));
        
        m_gridSizeScheme = dim3((grid->N()+31)/32, (grid->N()+31)/32, 1);
        m_blockSize = dim3(32, 32, 1);

        // run cuda kernel
        initScheme<<<m_gridSizeScheme, m_blockSize>>>(
            grid->getVerticesNb(), 
            m_V, 
            m_xIter, 
            m_vIter, 
            m_FIter, 
            m_vIterAcc, 
            m_FIterAcc, 
            grid->N()
            );
        cudaErrorCheck(cudaDeviceSynchronize());
        // init spring data structure
        initSprings(grid->N(), 1.0);
    };  



    void step(Plane *grid)
    {

        runRK4Iterations(grid);

        updateScheme<<<m_gridSizeScheme, m_blockSize>>>(
            grid->getVerticesNb(), 
            grid->N(),
            (glm::vec3 *) grid->getDataPtr(0), 
            m_V,
            m_vIterAcc, 
            m_FIterAcc, 
            m_timeStep, 
            m_unitM
            );
        cudaErrorCheck(cudaDeviceSynchronize());

    };

    void updateWind()
    {
        std::cout << "UPDATE WIND" << std::endl;
        for (int i = 0; i<3; ++i)
            m_wind[i] = m_windUI[i];
        m_windNormed = normalize(m_wind);
        m_wind = abs(m_wind);
    }

    void updateGravity()
    {
        std::cout << "UPDATE GRAVITY" << std::endl;
        m_gravity.y = -9.81*m_unitM;
    }


};

#endif