#ifndef EXPLICIT_SOLVER_H
#define EXPLICIT_SOLVER_H

#include "mesh.hcu"
#include "cuda_utils.hcu"
#include "simulation_params.h"


using namespace std;



__device__ void atomicAdd(float *addr, glm::vec3 val, glm::ivec3 offset, int seed)
{
    atomicAdd(addr + offset.x, val[offset.x]);
    atomicAdd(addr + offset.y, val[offset.y]);
    atomicAdd(addr + offset.z, val[offset.z]);
}

__device__ glm::vec3 computeSpringForces(
    bool isStretchSpring, 
    int i, 
    int j, 
    glm::vec3 x_i, 
    glm::vec3 v_i, 
    glm::vec3 x_j, 
    glm::vec3 v_j, 
    float L, 
    float Ks, 
    float Kd
    )
{
    glm::vec3 diff_xij = x_j - x_i;
    float length_xij  = sqrt(dot(diff_xij, diff_xij));

    if (abs(length_xij) < 10e-3) return glm::vec3(0.0f);
    glm::vec3 dir_xij = diff_xij/length_xij;

    float spring = Ks*(length_xij - L);
    float damping = Kd*dot(v_j-v_i, dir_xij);

    float correction = 0.0;
    float tau_c = 0.1;
    float shrinking = (length_xij - L)/L;
    if (shrinking > tau_c)
    {
        correction = 3.0*Ks*(length_xij - (1.0-tau_c) * L);

    }
    glm::vec3 total = (spring + damping + correction)*dir_xij;

    return total;
}


__global__ void updateInternalForces(
    bool isStretchSpring, 
    int maxTid, 
    int Ngrid, 
    int N, 
    glm::ivec2 *springIds, 
    glm::vec3 *xIter, 
    glm::vec3 *vIter, 
    glm::vec3 *FIter, 
    float L, 
    float Ks, 
    float Kd
    )
{
    int j = threadIdx.x + blockIdx.x*blockDim.x;
    int i = threadIdx.y + blockIdx.y*blockDim.y;
    int tid = j*N+i;

    if (tid < maxTid )
    {
        glm::ivec2 ids = springIds[tid];
        glm::vec3 fSpring = computeSpringForces(isStretchSpring, ids.x, ids.y, xIter[ids.x], vIter[ids.x], xIter[ids.y], vIter[ids.y], L, Ks, Kd);

        float *addA = &FIter[ids.x].x;
        float *addB = &FIter[ids.y].x;

        int seed = ids.x*ids.y;
        glm::ivec3 offset = glm::ivec3(seed, seed+1, seed+2) % 3;

        atomicAdd(addA, fSpring, offset, seed);
        atomicAdd(addB, -fSpring, offset, seed);

    }



}

__global__ void updateIterBuffers(
    int maxTid, 
    int N, 
    float kOffset, 
    float yOffset, 
    glm::vec3 *x, 
    glm::vec3 *v, 
    glm::vec3 *xIter, 
    glm::vec3 *vIter, 
    glm::vec3 *FIter, 
    glm::vec3 *vIterAcc, 
    float m
    )
{
    /**
     * Initializes the 2 buffers used for computing RK4 iterations 
    */

    int j = threadIdx.x + blockIdx.x*blockDim.x;
    int i = threadIdx.y + blockIdx.y*blockDim.y;

    int tid = j*N+i;

    if (tid < maxTid)
    {
        xIter[tid] = x[tid] + yOffset * vIter[tid]; // offset x

        glm::vec3 newV = v[tid] + yOffset * FIter[tid]/m; // xDot1,2,3,4
        vIter[tid] =  newV;

        vIterAcc[tid] += kOffset * newV;
        FIter[tid] = glm::vec3(0.0);
    }

}

__device__ glm::vec3 computeNormal(int tid, int i, int j, int N_m1, int N, glm::vec3 *x)
{
    glm::vec3 x_tid = x[tid];

    glm::vec3 shear_vec1 = j == N_m1? x_tid - x[tid-N] : x[tid+N] - x_tid; // right vec
    glm::vec3 shear_vec2 = i == 0? x_tid - x[tid+1] : x[tid-1] - x_tid; // up vec

    glm::vec3 normal1 = normalize(cross(shear_vec1, shear_vec2));

    glm::vec3 shear_vec3 = j == 0 ? x_tid - x[tid+N] : x[tid - N] - x_tid; // left vec
    glm::vec3 shear_vec4 = i == N_m1 ?  x_tid - x[tid-1] : x[tid+1] - x_tid; // bottom vec

    glm::vec3 normal2 = normalize(cross(shear_vec3, shear_vec4));

    return normalize(0.5f*(normal1+normal2));
}

__global__ void updateExternalForces(
    int maxTid, 
    int N, 
    float kOffset, 
    glm::vec3 *xIter, 
    glm::vec3 *vIter, 
    glm::vec3 *FIter, 
    glm::vec3 *FIterAcc, 
    glm::vec3 *n, 
    float m, 
    glm::vec3 absWind, 
    glm::vec3 normWind, 
    glm::vec3 gravity, 
    float Ka
    )
{
    int j = threadIdx.x + blockIdx.x*blockDim.x;
    int i = threadIdx.y + blockIdx.y*blockDim.y;

    int tid = j*N+i;

    if (tid < maxTid)
    {
        glm::vec3 normal = computeNormal(tid, i, j, N-1, N, xIter);

        n[tid] = normal;
        // if (tid == 6746 && normal.y < 0.0f) printf("normal = %f %f %f", normal.x, normal.y, normal.z);
        glm::vec3 F = FIter[tid] + dot(abs(normal), absWind) * normWind + gravity - Ka*vIter[tid];
        FIter[tid] = F;
        FIterAcc[tid] += kOffset * F; // add internal forces + all external forces : wind force + gravity force + friction force
    }
}

__global__ void updateScheme(int maxTid, int N, glm::vec3 *x, glm::vec3 *v, glm::vec3 *vIterAcc, glm::vec3 *FIterAcc, glm::vec3 *collisionsFBuffer, float h, float m)
{
    int j = threadIdx.x + blockIdx.x*blockDim.x;
    int i = threadIdx.y + blockIdx.y*blockDim.y;

    int tid = j*N+i;

    if (tid < maxTid)
    {

        // RK4 scheme
        x[tid] += h*vIterAcc[tid]/6.0f;
        v[tid] += h*(FIterAcc[tid] + collisionsFBuffer[tid])/(6.0f*m);

        vIterAcc[tid] = glm::vec3(0.0f);
        collisionsFBuffer[tid] = FIterAcc[tid]; // reuse buffer collisions for the collision phase that's coming next
        FIterAcc[tid] = glm::vec3(0.0f);
    }

}



__global__ void initScheme(int maxTid,  int N, glm::vec3 *v, glm::vec3 *xIter, glm::vec3 *vIter, glm::vec3 *FIter, glm::vec3 *vIterAcc, glm::vec3 *FIterAcc)
{
    int j = threadIdx.x + blockIdx.x*blockDim.x;
    int i = threadIdx.y + blockIdx.y*blockDim.y;

    int tid = j*N+i;

    if (tid < maxTid)
    {       
        v[tid] = glm::vec3(0.0);
        xIter[tid] = glm::vec3(0.0);
        vIterAcc[tid] = glm::vec3(0.0);
        vIter[tid] = glm::vec3(0.0);
        FIter[tid] = glm::vec3(0.0);
        FIterAcc[tid] = glm::vec3(0.0);

    }
}

struct SpringData
{
    std::vector<glm::ivec2> indices;
    
    // Cuda calls var
    glm::ivec2 *indicesCudaPtr;
    int sqrtN;
    dim3 gridSize;

    float restLength;
};

class ExplicitSolver
{
    private:

    bool m_correctSpring[4];

    int m_sqrtNRound;

    // data structures
    SpringData *m_springs;
    dim3 m_gridSizeScheme;
    dim3 m_blockSize;

    // RK4 buffers
    glm::vec3 *m_V; // current velocity for each particle
    glm::vec3 *m_xIter;
    glm::vec3 *m_vIter;
    glm::vec3 *m_vIterAcc;
    glm::vec3 *m_FIter; // sum of forces for each particle
    glm::vec3 *m_FIterAcc;

    ExplicitSolver(const ExplicitSolver &other);
    ExplicitSolver& operator=(const ExplicitSolver &other);

    void initSprings(const int &N, const float &L)
    {
        int N_minus_1 = N-1;
        int N_minus_2 = N-2;

        m_springs = new SpringData[4];
        float stretch_L(sqrt(2.0*L*L));
        float bend_L(2.0*L);
        float bendDiag_L(2.0*stretch_L);
        float restLengths[4] = {L, stretch_L, bend_L, bendDiag_L};

        // filling the data structure going from squares of length=2
        for (int j = 0; j <N; ++j)
        {
            for (int i = 0; i<N; ++i)
            {
                int id = j*N+i;

                // add structural springs id & length
                if (j < N_minus_1) m_springs[0].indices.push_back(glm::ivec2(id, id+N)); // right spring
                if (i < N_minus_1) m_springs[0].indices.push_back(glm::ivec2(id, id+1)); // bottom spring


                // add stretch springs id & length
                if (i < N_minus_1 && j < N_minus_1) m_springs[1].indices.push_back(glm::ivec2(id, id+N+1)); // 1st diag spring
                if (i > 0 && j < N_minus_1) m_springs[1].indices.push_back(glm::ivec2(id, id+N-1)); // 2nd diag spring

                // adding bend springs
                if (j < N_minus_2) m_springs[2].indices.push_back(glm::ivec2(id, id+2*N)); // right bend spring
                if (i < N_minus_2) m_springs[2].indices.push_back(glm::ivec2(id, id+2)); // bottom bend spring

                if (i < N_minus_2 && j < N_minus_2) m_springs[3].indices.push_back(glm::ivec2(id, id + 2*N + 2)); // 1st diag bend spring
                if (i > 1 && j < N_minus_2) m_springs[3].indices.push_back(glm::ivec2(id, id+2*N-2)); // 2nd diag bend spring

            }
        }

        for (int i=0; i<4; ++i)
        {   
            SpringData *spring = &m_springs[i];
            cudaErrorCheck(cudaMalloc((void **) &spring->indicesCudaPtr, sizeof(glm::ivec2)*spring->indices.size()));
            cudaErrorCheck(cudaMemcpy(spring->indicesCudaPtr, spring->indices.data(), sizeof(glm::ivec2)*spring->indices.size(), cudaMemcpyHostToDevice));
            m_springs[i].sqrtN = int(ceil(sqrt(spring->indices.size())));
            m_springs[i].restLength = restLengths[i];
            m_springs[i].gridSize = dim3((m_springs[i].sqrtN + 31)/32, (m_springs[i].sqrtN + 31)/32, 1);
        } 
    }

    void updateRK4(Plane *grid, SimulationParams &params, float kOffset, float yOffset)
    {
        
        // INIT SUB ITERATION BUFFERS FOR POSITION AND VELOCITY (y = y + yOffset * k)

        updateIterBuffers<<<m_gridSizeScheme, m_blockSize>>>(
            grid->getVerticesNb(), 
            grid->N(), 
            kOffset, 
            yOffset, 
            (glm::vec3 *) grid->getDataPtr(0), 
            m_V, 
            m_xIter, 
            m_vIter, 
            m_FIter, 
            m_vIterAcc, 
            params.unitM
            );

        cudaErrorCheck(cudaDeviceSynchronize());

        for (int i=0; i<4; ++i)
        {
            SpringData spring = m_springs[i];
            updateInternalForces<<<spring.gridSize, m_blockSize>>>(
                m_correctSpring[i], 
                spring.indices.size(),  
                grid->N(), 
                spring.sqrtN, 
                spring.indicesCudaPtr, 
                m_xIter, 
                m_vIter, 
                m_FIter, 
                spring.restLength, 
                params.Ks, 
                params.Kd
            );
        }
        cudaErrorCheck(cudaDeviceSynchronize());
        
        updateExternalForces<<<m_gridSizeScheme, m_blockSize>>>(
            grid->getVerticesNb(), 
            grid->N(),
            kOffset, 
            m_xIter, 
            m_vIter, 
            m_FIter, 
            m_FIterAcc, 
            (glm::vec3 *) grid->getDataPtr(1), 
            params.unitM, 
            params.wind, 
            params.windNormed, 
            params.gravity, 
            params.Ka 
            );
        cudaErrorCheck(cudaDeviceSynchronize());
    }

    public:

    ~ExplicitSolver()
    {
        cudaFree(m_xIter);
        cudaFree(m_vIter);
        cudaFree(m_vIterAcc);
        cudaFree(m_FIter);
        cudaFree(m_FIterAcc);
        cudaFree(m_V);
        for (int i=0; i<4; ++i)
        {
            cudaFree(m_springs[i].indicesCudaPtr);
        };
        delete m_springs;
        delete m_correctSpring;
    };

    glm::vec3 *getFBuffer() {return m_FIterAcc;};
    

    ExplicitSolver(
        Plane *grid
    ) : 
    m_correctSpring({false, true, false, false})
    {
        
        
        std::cout << "N = " << grid->N() << " && NB DE PTS :" << grid->getVerticesNb() << std::endl << std::flush ;
        
        // solver's buffers allocation
        cudaErrorCheck(cudaMalloc((void **) &m_V, sizeof(glm::vec3)*grid->getVerticesNb()));
        cudaErrorCheck(cudaMalloc((void **) &m_xIter, sizeof(glm::vec3)*grid->getVerticesNb()));
        cudaErrorCheck(cudaMalloc((void **) &m_vIter, sizeof(glm::vec3)*grid->getVerticesNb()));
        cudaErrorCheck(cudaMalloc((void **) &m_FIter, sizeof(glm::vec3)*grid->getVerticesNb()));
        cudaErrorCheck(cudaMalloc((void **) &m_vIterAcc, sizeof(glm::vec3)*grid->getVerticesNb()));
        cudaErrorCheck(cudaMalloc((void **) &m_FIterAcc, sizeof(glm::vec3)*grid->getVerticesNb()));
        
        m_gridSizeScheme = dim3((grid->N()+31)/32, (grid->N()+31)/32, 1);
        m_blockSize = dim3(32, 32, 1);

        // run cuda kernel
        resetScheme(grid);

        // init spring data structure
        initSprings(grid->N(), grid->L());
    };  

    void resetScheme(Plane *grid)
    {
        initScheme<<<m_gridSizeScheme, m_blockSize>>>(
            grid->getVerticesNb(), 
            grid->N(),
            m_V, 
            m_xIter, 
            m_vIter, 
            m_FIter, 
            m_vIterAcc, 
            m_FIterAcc
            );
        cudaErrorCheck(cudaDeviceSynchronize());
    }

    void step(Plane *grid, SimulationParams &params ,glm::vec3 *collisionsFBuffer)
    {

        // compute k1, k2, k3 and k4 iterations of RK4 algorithm
        updateRK4(grid, params, 1.0, 0.0);
        updateRK4(grid, params, 2.0, params.timeStep*0.5);
        updateRK4(grid, params, 2.0, params.timeStep*0.5);
        updateRK4(grid, params, 1.0, params.timeStep);

        updateScheme<<<m_gridSizeScheme, m_blockSize>>>(
            grid->getVerticesNb(), 
            grid->N(),
            (glm::vec3 *) grid->getDataPtr(0), 
            m_V,
            m_vIterAcc, 
            m_FIterAcc, 
            collisionsFBuffer,
            params.timeStep, 
            params.unitM
            );
        cudaErrorCheck(cudaDeviceSynchronize());

    };

    glm::vec3 *getVelocities() {return m_V;};
};

#endif