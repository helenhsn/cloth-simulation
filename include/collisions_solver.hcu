#ifndef COLLISION_SOLVER_H
#define COLLISION_SOLVER_H

#include <vector>
#include "mesh.hcu"
#include "bvh.hcu"
#include "cuda_utils.hcu"
#include "simulation_params.h"

// off-chip memory, readable by 100k threads
__constant__ const float EPS = 10e-4f;
__constant__ const int MAX_STACK_SIZE = 64;
__constant__ const float MAX_SCENE_BOUNDS = 50.0;
__constant__ const float CLOTH_THICKNESS = 0.03f; // cloth thickness

struct NodeInfo {
    int index;
    float distToBVH;
};
__device__ inline glm::vec3 interpolateNormal(Triangle &tri, glm::vec4 hitInfo)
{
    return hitInfo.x*tri.normal0 + hitInfo.y*tri.normal1 + hitInfo.z*tri.normal2;
}


__device__ void push(struct NodeInfo* stack, int *size, struct NodeInfo value)
{

    stack[*size] = value;
    *size = *size +1; 
}

__device__ struct NodeInfo &pop(struct NodeInfo* stack, int *size)
{
    *size = *size - 1;
    return stack[*size];
}

__device__ inline glm::vec4 computeIntersection(Triangle &tri, int triIdx, glm::vec4 infos, float det, glm::vec3 dir)
{
    return glm::vec4(tri.p0*infos.x + tri.p1*infos.y +tri.p2*infos.z + infos.w*dir, infos.w)/det;
}

__device__ bool intersectSegmentTriangle(
    glm::vec3 *colors,
    int colliderId,
    int i, 
    int j, 
    int tid, 
    glm::vec3 origin, 
    glm::vec3 dir, 
    Triangle *triangles, 
    GLuint triIdx, 
    glm::vec4 *hitPtInfos
    )
{
    /**
     * Tests if the given ray intersects the given triangle. If successful, returns the barycentric coordinates & distance to origin of the intersection point on the given triangle.
     * */
    
    glm::vec3 qp = -dir;

    Triangle tri = triangles[triIdx];


    glm::vec3 ab = (tri.p1 - tri.p0);
    glm::vec3 ac = (tri.p2 - tri.p0);

    glm::vec3 n = tri.normal;

    
    float t, u, v, w;
    
    float det = dot(qp, n);

    glm::vec3 sideP = origin - tri.p0;
    float isPBehind = dot(sideP, n);

    if (tid==2012) {
        colors[tid] = glm::vec3(0.0f, 2.0f, 0.0f);
    }

    if (det > 10e-6 && isPBehind < 10e-6)
    {
        // if (tid== 2012) printf("\n 1 --> n = %f %f %f sideP = %f %f %f, isPBehind = %f \n det = %f, dir = %f %f %f", n.x, n.y, n.z, sideP.x, sideP.y, sideP.z, isPBehind, det, dir.x, dir.y, dir.z);
        return false;

    }
    if (det <= EPS)  // det <= 0.0
    {
        // if (tid==2048) printf("\nNW 0: det =%f, res= %f", det, res);
        return false; // ray is parallel to triangle or does not point towards triangle
    }
    glm::vec3 ap = (origin - tri.p0);
    t = dot(ap, n);
    glm::vec2 limits = glm::vec2(0.01f, 0.9f)*CLOTH_THICKNESS*det;
    if (t < limits.x || t > limits.y || abs(t) >= abs((*hitPtInfos).w) )
    {
        // if (i==32 && j==32) {
        //     printf("\nNW 1: det =%f, limits= %f %f , t=%f", det, limits.x, limits.y, t);
        //}
        return false;
    }

    glm::vec3 e = cross(qp, ap); // scalar triple (pq, pa, pc)
    v =  dot(ac, e);
    if (v/det < -EPS || v - det > EPS) 
    {
        // if (i==32 && j==32) {
        //     printf("\nNW 2: det =%f, limits= %f %f , t=%f, v/det=%f", det, limits.x, limits.y, t, v/det);
        // }

        return false; 
    }

    w = -dot(ab, e);
    if (w/det < -EPS || w - det > EPS) 
    {
        // if (tid==2048) {
        //     printf("\nNW 3: det =%f, limits= %f %f , t=%f, w/det=%f", det, limits.x, limits.y, t, w/det);
        //     }
        
        return false;
    }

    u = det - v - w;
    if (u/det < -EPS)
    {   
        // if (tid==2048) {
        //     printf("\nNW 4: det =%f, limits= %f %f , t=%f, u/det=%f", det, limits.x, limits.y, t, u/det);
        //     }

        return false;
    }

    *hitPtInfos = computeIntersection(tri, triIdx, glm::vec4(u, v, w, t), det, qp);
    glm::vec4 test = glm::vec4(u, v, w, t)/det;
    glm::vec3 test2 = normalize(qp);
    if (colliderId==2) {
        // printf("\nn = %f %f %f sideP = %f %f %f, isPBehind = %f \n det = %f, dir = %f %f %f", n.x, n.y, n.z, sideP.x, sideP.y, sideP.z, isPBehind, det, dir.x, dir.y, dir.z);
        // printf("\n det =%f res =%f \n norm_q= %f %f %f, \n n = %f %f %f, dir = %f %f %f", det, res, test2.x, test2.y, test2.z, n.x, n.y, n.z, dir.x, dir.y, dir.z);
    }
    return true;

}

__device__ bool intersectRayAABB(
    int tid, 
    int nodeId, // FOR DEBUGGING
    glm::vec3 origin, 
    glm::vec3 dir, 
    glm::vec3 bbmin, 
    glm::vec3 bbmax, 
    float *tNear,
    bool selfColl
    )
{
    /**
     * Checks whether the current ray intersect the given AABB
    */
    
    glm::vec3 sMin = (bbmin - origin)/dir;
    glm::vec3 sMax = (bbmax - origin)/dir;

    glm::vec3 tMin = min(sMin, sMax);
    glm::vec3 tMax = max(sMin, sMax);

    float tNewNear = 0.0;
    float tFar = 100.0;

    for (int i =0; i<3; ++i) 
    {
        if (abs(dir[i]) < EPS)
        {
            if (origin[i] < bbmin[i] || origin[i] > bbmax[i]) {
                return false;
            }
            if (selfColl) return false;
        }
        else
        {
            tNewNear = max(tNewNear, tMin[i]);
            tFar = min(tFar, tMax[i]);


            if (tNewNear > tFar) 
            {
                return false;
            }
        }
    }
    *tNear = tNewNear;
    return true;
    
}


__device__ void updateAABB(
    Node *node,
    Node &leftChild,
    Node &rightChild
)
{
    AABB *aabb = &node->aabb;
    aabb->aabbMin = min(leftChild.aabb.aabbMin, rightChild.aabb.aabbMin);
    aabb->aabbMax = max(leftChild.aabb.aabbMax, rightChild.aabb.aabbMax);
}


__global__ void resetUpdate(
    int maxTid,
    int N,
    Node *BVH
)
{
    int i = threadIdx.y + blockIdx.y*blockDim.y;
    int j = threadIdx.x + blockIdx.x*blockDim.x;

    int tid = j*N +i;
    if (tid < maxTid)
    {
        Node *node = &BVH[tid];
        node->isUpdated = false;
    }
}

__global__ void updateBVH(
    int maxTid,
    int N,
    int *leafNodes,
    int *reductionBuff,
    Node *BVH,
    Triangle *triangles,
    GLuint *triIndices, 
    glm::vec3 *vertices
)
{
    // extern __shared__ int sBuff[];
    // int tid = threadIdx.x;
    // int i = tid + blockIdx.x*blockDim.x;
    int i = threadIdx.y + blockIdx.y*blockDim.y;
    int j = threadIdx.x + blockIdx.x*blockDim.x;

    int tid = j*N +i;

    if (tid <maxTid)
    {   
        int nodeId = leafNodes[tid];
        Node *node = &BVH[nodeId];
        do
        {
            // __syncthreads(); ?? how to sync remaining active threads?

            if (node->triCount != 0)
            {
                AABB *aabb = &node->aabb;

                for (int i=0; i<node->triCount; ++i)
                {
                    Triangle *tri = &triangles[triIndices[node->leftIdx + i]];
                    tri->p0 = vertices[tri->i0];
                    tri->p1 = vertices[tri->i1];
                    tri->p2 = vertices[tri->i2];

                    tri->centroid = (tri->p0 + tri->p1 + tri->p2)/3.0f;

                    tri->normal = cross(tri->p1 - tri->p0, tri->p2 - tri->p0);

                    glm::vec3 triMin = min(min(tri->p0, tri->p1), tri->p2);
                    glm::vec3 triMax = max(max(tri->p0, tri->p1), tri->p2);

                    aabb->aabbMin = min(node->aabb.aabbMin, triMin);
                    aabb->aabbMax = max(node->aabb.aabbMax, triMax);
                }
                node->isUpdated = true;
            }
            else
            {
                Node *leftChild = &BVH[node->leftIdx];
                Node *rightChild = &BVH[node->leftIdx+1];

                if (leftChild->isUpdated && rightChild->isUpdated)
                {
                    updateAABB(node, *leftChild, *rightChild);
                    node->isUpdated = true;
                }
            }
            if (node->isUpdated)
            {
                int parentId = node->parentIdx;
                Node *parentNode = &BVH[parentId];
                if (parentNode->leftIdx == nodeId && nodeId > 0)
                {
                    nodeId = parentId;
                    node = parentNode;
                }

            }
        } while (!node->isUpdated);
    }
}

__global__ void collisionDetection(
    int colliderId,
    int N, 
    int maxTid, 
    glm::vec3 *origins, 
    glm::vec3 *dirs, 
    glm::vec3 *colors,
    Node *BVH, 
    Triangle *triangles, 
    GLuint *triIndices, 
    glm::ivec2 *hitColliderTri, 
    glm::vec4 *hitPointInfo, 
    float factor
)
{

    int j = threadIdx.x + blockIdx.x*blockDim.x;
    int i = threadIdx.y + blockIdx.y*blockDim.y;

    int tid = j*N+i;
    
    if (tid < maxTid)
    {
        bool isSelfColl = (colliderId == 2);
        glm::ivec2 hitColTri = hitColliderTri[tid];
        glm::vec4 hitInfo = hitPointInfo[tid];
        glm::vec3 dir = dirs[tid] * factor; // normal * factor -> factor is either -1.0 or 1.0 (so dir is either -n or n)
        glm::vec3 origin = origins[tid];

        int rootIndex = 0;
        Node *currentNode = &BVH[rootIndex];

        float tNear;
        if (!intersectRayAABB(tid, rootIndex, origin, dir, currentNode->aabb.aabbMin, currentNode->aabb.aabbMax, &tNear, isSelfColl)) 
        {
            return;
        }

        NodeInfo stack[MAX_STACK_SIZE];
        int stackSize = 0;
        
        push(stack, &stackSize, NodeInfo {rootIndex, tNear});

        while (stackSize != 0)
        {
            //printf("\nSTACK SIZE = %i", stackSize);
            NodeInfo &current = pop(stack, &stackSize);
            currentNode = &BVH[current.index];

            if (current.distToBVH > MAX_SCENE_BOUNDS) continue;

            if (currentNode->triCount != 0 ) // if the current node is a leaf node -> narrow phase
            {
                for (int k = 0; k < currentNode->triCount; k++)
                {

                    GLuint idx = triIndices[currentNode->leftIdx + k];
                    if (intersectSegmentTriangle(colors, colliderId, i, j, tid, origin, dir, triangles, idx, &hitInfo))
                    {
                        hitColTri = glm::ivec2(colliderId, idx);
                    }
                }
            }
            else
            {
                // fetching 2 children info and performing BV intersection on them
                NodeInfo leftChildInfo = NodeInfo {currentNode->leftIdx, 0.0f };
                Node *leftChild = &BVH[leftChildInfo.index];
                if (intersectRayAABB(tid, leftChildInfo.index, origin, dir, leftChild->aabb.aabbMin, leftChild->aabb.aabbMax, &leftChildInfo.distToBVH, isSelfColl)) 
                {
                    push(stack, &stackSize, leftChildInfo);
                }

                NodeInfo rightChildInfo = NodeInfo {currentNode->leftIdx+1, 0.0f};
                Node *rightChild = &BVH[rightChildInfo.index];
                if (intersectRayAABB(tid, rightChildInfo.index, origin, dir, rightChild->aabb.aabbMin, rightChild->aabb.aabbMax, &rightChildInfo.distToBVH, isSelfColl)) 
                {
                    push(stack, &stackSize, rightChildInfo);
                }
            
            }

        }

    hitPointInfo[tid] = hitInfo;
    hitColliderTri[tid] = hitColTri;
    }

}

__device__ glm::vec3 interpolateVelocity(
    Triangle &tri,
    glm::vec4 barCoords,
    glm::vec3 *velocities
)
{
    return (velocities[tri.i0]*barCoords.x + velocities[tri.i1]*barCoords.y + velocities[tri.i2]*barCoords.z);
}
__global__ void collisionResponse(
    int N, 
    int maxTid, 
    glm::vec3 *color,
    glm::vec3 *pos, 
    glm::vec3 *velCloth, 
    glm::vec3 **velCollidersPtr,
    glm::vec3 *OutFBuffer, 
    Triangle **trianglesPtr, 
    glm::ivec2 *hitColliderTri,
    glm::vec4 *hitPointInfo,
    float Kf, 
    float h, 
    float unitM
    )
{
    int j = threadIdx.x + blockIdx.x*blockDim.x;
    int i = threadIdx.y + blockIdx.y*blockDim.y;

    int tid = j*N+i;


    glm::ivec2 hit = hitColliderTri[tid];

    glm::vec3 collisionF = glm::vec3(0.0f);
    glm::vec3 c = glm::vec3(0.75f, 0.0f, 0.0f);

    if (tid < maxTid)
    {
        if (hit.x > -1 && hit.y > -1)
        {
            if (hit.x==2) {
                c = glm::vec3(0.0f, 2.0f, 0.0);
            }


            // TODO -> tangent & normal velocities => friction coef
            Triangle *tris = trianglesPtr[hit.x];
            Triangle tri = tris[hit.y];
            glm::vec4 hitInfo = hitPointInfo[tid];
            
            glm::vec3 F = OutFBuffer[tid];
            glm::vec3 n = normalize(tri.normal);

            float Ncomp = dot(F,n);
            glm::vec3 N = Ncomp*n;
            glm::vec3 R = max(-Ncomp, 0.0f)*n;


            float normN = sqrt(dot(N, N));
            
            glm::vec3 T = F - N;
            float normT = sqrt(dot(T, T));

            glm::vec3 vCloth = velCloth[tid];
            glm::vec3 vCollider =  interpolateVelocity(tri, hitInfo, velCollidersPtr[hit.x]);
            glm::vec3 v = vCloth - vCollider;
            glm::vec3 vT = v - dot(v,n)*n;
            float normVt = sqrt(dot(vT, vT));

            glm::vec3 friction = glm::vec3(0.0f); //tangential strength
            
            if (normVt > EPS) // kinetic friction
            {
                friction = -Kf*normN*normalize(vT); //  force of friction is always exerted in a direction that opposes movement (for kinetic friction)
            } 
            else 
            { // static friction
                //  force of friction is always exerted in a direction that opposes potential movement (for static friction)
                friction = -T;
                if (normT - Kf*normN > EPS)
                {
                    friction = Kf*normN*normalize(friction);
                }
            }

            // if cloth vertex velocity is opposed to the normal of the collider's surface, we discard its normal component
            // (we don't want the cloth to sink in its collider)
            if (dot(v, n) < EPS) velCloth[tid] = vT;  
            
            collisionF = R + friction;

            velCloth[tid] = vCollider ; // velocity needs to be canceled as we don't want the point to keep sinking inside the collider

            pos[tid] = glm::vec3(hitInfo.x, hitInfo.y, hitInfo.z) + 0.1f*CLOTH_THICKNESS*n; // slightly offsetting the position of the vertex

        }
    OutFBuffer[tid] = collisionF;
    if (tid != 2012) color[tid] = c;
    }
}

__global__ void resetCollisionBuffers(
    int maxTid, 
    int N, 
    glm::ivec2 *hitIdx, 
    glm::vec4 *infoPt
    )
{

    int j = threadIdx.x + blockIdx.x*blockDim.x;
    int i = threadIdx.y + blockIdx.y*blockDim.y;

    int tid = j*N+i;
    if (tid < maxTid)
    {
        hitIdx[tid] = glm::ivec2(-10, -10);
        infoPt[tid] = glm::vec4(10e30f);
    }
}

__global__ void rotation(
    int maxTid,
    int N,
    glm::vec3 *vertices,
    glm::vec3 *velocities,
    glm::mat4 rot,
    glm::mat4 model,
    glm::mat4 modelInv,
    float h
)
{
    int j = threadIdx.x + blockDim.x*blockIdx.x;
    int i = threadIdx.y + blockDim.y*blockIdx.y;

    int tid = j*N + i;

    if (tid < maxTid)
    {
        glm::vec3 v = vertices[tid];
        glm::vec4 newVec4 = model * rot * modelInv * glm::vec4(v.x, v.y, v.z, 1.0f);

        glm::vec3 newVec3 = glm::vec3(newVec4.x, newVec4.y, newVec4.z);

        vertices[tid] = newVec3;
        velocities[tid] = (newVec3 - v)/h; // euler explicit
    }


}

struct Collider
{
    Mesh *meshPtr;
    BVH *bvh;

    Node *treeCuda;
    int *leafNodesCuda;
    int *reductionBuffCuda;
    Triangle *trianglesCuda;
    GLuint *triIndicesCuda;

    glm::vec3 *velocitiesCuda;
    bool resetVel;

    Collider(Mesh *ptr, int nbVertices, glm::vec3 *velocitiesCudaPtr) : 
    meshPtr(ptr),
    bvh(nullptr),
    treeCuda(nullptr),
    leafNodesCuda(nullptr),
    reductionBuffCuda(nullptr),
    trianglesCuda(nullptr),
    triIndicesCuda(nullptr),
    resetVel(false)
    {
        bvh = new BVH(meshPtr);
        if (!velocitiesCudaPtr)
        {   
            resetVel = true;
            cudaErrorCheck(cudaMalloc((void **) &velocitiesCuda, sizeof(glm::vec3)* (ptr->getVerticesNb()) ));
        }
        resetBuffers(nbVertices);

    }

    ~Collider()
    {
        // free everything, including CUDA buffers TODO
    }

    void resetBuffers(int nbVertices)
    {
        // send bvh data to gpu
        if (treeCuda) cudaErrorCheck(cudaFree(treeCuda));
        cudaErrorCheck(cudaMalloc((void **) &treeCuda, sizeof(Node)* (bvh->getNbNodes()) ));
        cudaErrorCheck(cudaMemcpy(treeCuda, bvh->getTree(), sizeof(Node)*bvh->getNbNodes(), cudaMemcpyHostToDevice));

        if (leafNodesCuda) cudaErrorCheck(cudaFree(leafNodesCuda));
        cudaErrorCheck(cudaMalloc((void **) &leafNodesCuda, sizeof(int)* (bvh->sizeLeafNodes()) ));
        cudaErrorCheck(cudaMemcpy(leafNodesCuda, bvh->getLeafNodes(), sizeof(int)*bvh->sizeLeafNodes(), cudaMemcpyHostToDevice));

        if (reductionBuffCuda) cudaErrorCheck(cudaFree(reductionBuffCuda));
        cudaErrorCheck(cudaMalloc((void **) &reductionBuffCuda, sizeof(int)* (bvh->sizeReducBuff()) ));
        cudaErrorCheck(cudaMemcpy(reductionBuffCuda, bvh->getReductionBuff(), sizeof(int)*bvh->sizeReducBuff(), cudaMemcpyHostToDevice));

        if (trianglesCuda) cudaErrorCheck(cudaFree(trianglesCuda));
        cudaErrorCheck(cudaMalloc((void **) &trianglesCuda, sizeof(Triangle)* bvh->getNbTri() ));
        cudaErrorCheck(cudaMemcpy(trianglesCuda, bvh->tri(), sizeof(Triangle) * bvh->getNbTri(), cudaMemcpyHostToDevice));

        if (triIndicesCuda) cudaErrorCheck(cudaFree(triIndicesCuda));
        cudaErrorCheck(cudaMalloc((void **) &triIndicesCuda, sizeof(GLuint)*bvh->getNbtriIdx()));
        cudaErrorCheck(cudaMemcpy(triIndicesCuda, bvh->triIndices(), sizeof(GLuint)* bvh->getNbtriIdx(), cudaMemcpyHostToDevice));

        if (resetVel)  
        {
            cudaErrorCheck(cudaFree(velocitiesCuda));
            cudaErrorCheck(cudaMalloc((void **) &velocitiesCuda, sizeof(glm::vec3)* (meshPtr->getVerticesNb())));
        }

        

    }
};

class CollisionSolver
{

    public:
    CollisionSolver(Plane *cloth) : m_verticesNb(cloth->getVerticesNb()) {
        cudaErrorCheck(cudaMalloc((void **) &m_collisionsFBuffer, sizeof(glm::vec3)*m_verticesNb));

        std::vector<glm::vec3> Fbuffers(m_verticesNb, glm::vec3(0.0f));
        cudaErrorCheck(cudaMalloc((void **) &m_collisionsFBuffer, sizeof(glm::vec3)*m_verticesNb));
        cudaErrorCheck(cudaMemcpy(m_collisionsFBuffer, Fbuffers.data(), sizeof(glm::vec3)*m_verticesNb, cudaMemcpyHostToDevice));

        cudaErrorCheck(cudaMalloc((void **) &m_hitColliderTri, sizeof(glm::ivec2)*m_verticesNb));
        cudaErrorCheck(cudaMalloc((void **) &m_hitPointInfo, sizeof(glm::vec4)*m_verticesNb));

    };

    void reset()
    { 
        if (m_collisionsFBuffer) cudaErrorCheck(cudaFree(m_collisionsFBuffer));
        std::vector<glm::vec3> Fbuffers(m_verticesNb, glm::vec3(0.0f));
        cudaErrorCheck(cudaMalloc((void **) &m_collisionsFBuffer, sizeof(glm::vec3)*m_verticesNb));
        cudaErrorCheck(cudaMemcpy(m_collisionsFBuffer, Fbuffers.data(), sizeof(glm::vec3)*m_verticesNb, cudaMemcpyHostToDevice));

        for (auto &collider: m_colliders)
        {
            
            collider.resetBuffers(m_verticesNb);
        }

    }

    void solve(Plane *cloth, glm::vec3 *v, SimulationParams &params, glm::vec3 *FBuff) 
    {
        // UPDATING BVH
        Collider updtCollider = m_colliders[m_colliders.size()-1];


        int sqrtN = int(ceil(sqrt(updtCollider.meshPtr->getVerticesNb())));
        dim3 colGrid((sqrtN+31)/32, (sqrtN+31)/32, 1);
        dim3 colBlock(32, 32, 1);

        float rotAngle = 0.0f;
        if (params.isRotating)
        {
            rotAngle = 0.001f;
        }
        glm::mat4 rot = glm::rotate(glm::mat4(1.0f), rotAngle, glm::vec3(0.0f, 1.0f, 0.0f));
        rotation<<<colGrid, colBlock>>>(
            updtCollider.meshPtr->getVerticesNb(),
            sqrtN,
            (glm::vec3 *) updtCollider.meshPtr->getDataPtr(0),
            updtCollider.velocitiesCuda,
            rot,
            updtCollider.meshPtr->getModelMatrix(),
            glm::inverse(updtCollider.meshPtr->getModelMatrix()),
            params.timeStep
        );
        cudaErrorCheck(cudaDeviceSynchronize());

        sqrtN = int(ceil(sqrt(updtCollider.bvh->getNbNodes())));
        colGrid = dim3((sqrtN+31)/32, (sqrtN+31)/32, 1);
        colBlock = dim3(32, 32, 1);
        resetUpdate<<<colGrid, colBlock>>>(
            updtCollider.bvh->getNbNodes(),
            sqrtN,
            updtCollider.treeCuda
        );
        cudaErrorCheck(cudaDeviceSynchronize());


        sqrtN = int(ceil(sqrt(updtCollider.bvh->sizeLeafNodes())));
        colGrid = dim3((sqrtN+31)/32, (sqrtN+31)/32, 1);
        colBlock = dim3(32, 32, 1);

        updateBVH<<<colGrid, colBlock>>>(
            updtCollider.bvh->sizeLeafNodes(),
            sqrtN,
            updtCollider.leafNodesCuda,
            updtCollider.reductionBuffCuda,
            updtCollider.treeCuda,
            updtCollider.trianglesCuda,
            updtCollider.triIndicesCuda,
            (glm::vec3 *) updtCollider.meshPtr->getDataPtr(0)
            );
        cudaErrorCheck(cudaDeviceSynchronize());


        // 1 KERNEL CALL = cast rays from 2 directions : normals AND velocity vectorz
        // resolve intersections (intersection AABB/AABB + primary test = ray/triangle intersection)
        // -> fill a bool array saying whether there was a collision or not + another array of 3d vectors containing pt of intersection <?>
        
        dim3 gridDim((cloth->N() + 31)/32, (cloth->N() + 31)/32, 1);
        dim3 blockDim(32, 32, 1);


        resetCollisionBuffers<<<gridDim, blockDim>>>(cloth->getVerticesNb(), cloth->N(), m_hitColliderTri, m_hitPointInfo);
        cudaErrorCheck(cudaDeviceSynchronize());


        for (int i=0; i< (int) m_colliders.size(); ++i)
        {   
            auto &collider = m_colliders[i];
        
            for (float factor = -1.0; factor < 2.0; factor+=2.0)
            {
    
                // if (dir>0.0 && i==2) continue;
                // raytracing using velocity
                collisionDetection<<<gridDim, blockDim>>>(
                    i,
                    cloth->N(), 
                    cloth->getVerticesNb(), 
                    (glm::vec3 *) cloth->getDataPtr(0),
                    (glm::vec3 *) cloth->getDataPtr(1),
                    (glm::vec3 *) cloth->getDataPtr(3),
                    collider.treeCuda,
                    collider.trianglesCuda,
                    collider.triIndicesCuda,
                    m_hitColliderTri,
                    m_hitPointInfo,
                    factor
                );
                cudaErrorCheck(cudaDeviceSynchronize());

                if (i != 2) factor = 3.0;
            }
        }
        collisionResponse<<<gridDim, blockDim>>>(
            cloth->N(), 
            cloth->getVerticesNb(),
            (glm::vec3 *) cloth->getDataPtr(3),
            (glm::vec3 *) cloth->getDataPtr(0),
            v,
            m_velsPtr,
            m_collisionsFBuffer,
            m_trisPtr,
            m_hitColliderTri,
            m_hitPointInfo,
            params.Kf,
            params.timeStep,
            params.unitM
        );
        cudaErrorCheck(cudaDeviceSynchronize());


    };

    void addCollider(Mesh *colliderMesh, glm::vec3 *velocitiesCudaPtr)
    {
        Collider collider(colliderMesh, m_verticesNb, velocitiesCudaPtr);
        m_colliders.push_back(collider);
        m_colTriCudaPtrs.push_back(collider.trianglesCuda);

        if (m_trisPtr) cudaFree(m_trisPtr);
        cudaErrorCheck(cudaMalloc((void **) &m_trisPtr, sizeof(Triangle *)*m_colTriCudaPtrs.size()));
        cudaErrorCheck(cudaMemcpy(m_trisPtr, m_colTriCudaPtrs.data(), sizeof(Triangle *)*m_colTriCudaPtrs.size(), cudaMemcpyHostToDevice));
        
        m_colVelocitiesPtrs.push_back(collider.velocitiesCuda);
        if (m_velsPtr) cudaFree(m_velsPtr);
        cudaErrorCheck(cudaMalloc((void **) &m_velsPtr, sizeof(glm::vec3 *)*m_colVelocitiesPtrs.size()));
        cudaErrorCheck(cudaMemcpy(m_velsPtr, m_colVelocitiesPtrs.data(), sizeof(glm::vec3 *)*m_colVelocitiesPtrs.size(), cudaMemcpyHostToDevice));
    };

    glm::vec3 *collisionsFBuffer() {return m_collisionsFBuffer;};

    void bindCollidersCudaData()
    {
        for (auto &collider: m_colliders)
        {
            collider.meshPtr->bindCudaData();
        }
    }

    void unBindCollidersCudaData()
    {
        for (auto &collider: m_colliders)
        {
            collider.meshPtr->unbindCudaData();
        }
    }

    private:

    std::vector<Collider> m_colliders;

    std::vector<Triangle *> m_colTriCudaPtrs; // stores CUDA pointers to colliders' triangles
    Triangle **m_trisPtr = nullptr;
    std::vector<glm::vec3 *> m_colVelocitiesPtrs; 
    glm::vec3 **m_velsPtr = nullptr;

    int m_verticesNb;

    glm::vec3 *m_collisionsFBuffer;
    glm::ivec2 *m_hitColliderTri;
    glm::vec4 *m_hitPointInfo;


};

#endif