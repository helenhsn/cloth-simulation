#ifndef MESH_H
#define MESH_H

#include "glad.h"
#include "cuda_gl_interop.h"
#include "cuda_utils.hcu"
#include "shader.h"
#include "glm/glm.hpp"
#include <iostream>
#include <vector>

typedef struct Data 
{
    std::vector<glm::vec3> vertices;
    std::vector<glm::vec3> normals;
    std::vector<glm::vec2> uv;
    std::vector<GLuint> indices;
} Data;

class Mesh
{

private:
    GLuint m_glid;
    GLuint m_VAO = 0;
    GLuint m_VBOs[3];
    GLuint m_EBO = 0;

    int m_nbCudaVBOs = 0;
    float **m_dataPtrVBOs;
    cudaGraphicsResource_t *m_cudaResVBOs; // Cuda ptr that will point to OpenGL's VBOs
    
    int m_VerticesNb;
    int m_IndicesNb;

    GLenum m_primOpenGL;

    Data m_data; // stocking data to reset mesh when needed
    

public:
    Mesh()=default;
    Mesh(ShaderProgram pgrm, const Data &data, std::vector<bool> isCudaShared, GLenum prim = GL_TRIANGLES): m_data(data), m_glid(pgrm.glid), m_nbCudaVBOs(isCudaShared.size()), m_primOpenGL(prim)
    {


        m_VerticesNb = data.vertices.size();
        m_IndicesNb = data.indices.size();

        glGenVertexArrays(1, &m_VAO);
        glBindVertexArray(m_VAO);

        ///////////////// VERTICES INITITIALIZATION /////////////////
        glGenBuffers(1, &m_VBOs[0]);
        glBindBuffer(GL_ARRAY_BUFFER, m_VBOs[0]);
        glBufferData(GL_ARRAY_BUFFER, data.vertices.size()*sizeof(glm::vec3), data.vertices.data(), GL_STATIC_DRAW);
        
        GLint loc = glGetAttribLocation(pgrm.glid, "pos");
        if (loc < 0) 
        {
            std::cout << "Vertices attrib not found in shader : " << pgrm.glid << std::endl;
        }
        glEnableVertexAttribArray(loc);
        glVertexAttribPointer(loc, 3, GL_FLOAT, GL_FALSE, sizeof(glm::vec3), (void *)0);
        
        ///////////////// NORMALS INITITIALIZATION /////////////////
        glGenBuffers(1, &m_VBOs[1]);
        glBindBuffer(GL_ARRAY_BUFFER, m_VBOs[1]);
        glBufferData(GL_ARRAY_BUFFER, data.normals.size()*sizeof(glm::vec3), data.normals.data(), GL_STATIC_DRAW);
        
        loc = glGetAttribLocation(pgrm.glid, "n");
        if (loc < 0) 
        {
            std::cout << "Normal attrib not found in shader : "  << pgrm.glid << std::endl;
        }
        glEnableVertexAttribArray(loc);
        glVertexAttribPointer(loc, 3, GL_FLOAT, GL_FALSE, sizeof(glm::vec3), (void *)0);
        
        ///////////////// UV INITITIALIZATION /////////////////
        glGenBuffers(1, &m_VBOs[2]);
        glBindBuffer(GL_ARRAY_BUFFER, m_VBOs[2]);
        glBufferData(GL_ARRAY_BUFFER, data.uv.size()*sizeof(glm::vec2), data.uv.data(), GL_STATIC_DRAW);
        
        loc = glGetAttribLocation(pgrm.glid, "uv");
        if (loc < 0) 
        {
            std::cout << "UV attrib not found in shader : " << pgrm.glid << std::endl;
        }
        glEnableVertexAttribArray(loc);
        glVertexAttribPointer(loc, 2, GL_FLOAT, GL_FALSE, sizeof(glm::vec2), (void *)0);


        ///////////////// REGISTERING VERTICES VBO WITH CUDA <!> /////////////////
        m_cudaResVBOs = new cudaGraphicsResource_t[m_nbCudaVBOs];
        m_dataPtrVBOs = new float*[m_nbCudaVBOs];
        
        for (int i = 0; i<3; i++)
        {
            m_dataPtrVBOs[i] = nullptr;
            m_cudaResVBOs[i] = nullptr;
            if (isCudaShared[i])
                cudaErrorCheck(cudaGraphicsGLRegisterBuffer(&m_cudaResVBOs[i], m_VBOs[i], cudaGraphicsMapFlagsNone));
        }

        // EBO
        glGenBuffers(1, &m_EBO);
        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, m_EBO);
        glBufferData(GL_ELEMENT_ARRAY_BUFFER, data.indices.size()*sizeof(GLuint), data.indices.data(), GL_STATIC_DRAW);
    };

    ~Mesh() 
    {
        glDeleteVertexArrays(1, &m_VAO);
        m_VAO = 0;
        for (int i =0; i<3; i++)
        {
            if (m_cudaResVBOs[i]) 
            {
                cudaErrorCheck(cudaGraphicsUnregisterResource(m_cudaResVBOs[i]));
            }
            glDeleteBuffers(1, &m_VBOs[i]);
            m_VBOs[i] = 0;
        }
        glDeleteBuffers(1, &m_EBO);
        m_EBO = 0;
    };

    virtual void draw()
    {
        
        glBindVertexArray(m_VAO);
        glDrawElements(m_primOpenGL,  m_IndicesNb, GL_UNSIGNED_INT, 0);
        glBindVertexArray(0);
    };

    void bindCudaData()
    {
        for (int i=0; i<m_nbCudaVBOs; i++)
        {
            if (m_cudaResVBOs[i]) bindBuffer(m_dataPtrVBOs[i], m_cudaResVBOs[i]);
        }
    };

    void unbindCudaData()
    {
        for (int i=0; i<m_nbCudaVBOs; i++)
        {
            if (m_cudaResVBOs[i]) unbindBuffer(m_cudaResVBOs[i]);
        }
    };

    float *getDataPtr(int i)
    {
        return m_dataPtrVBOs[i];
    };

    int getVerticesNb() {return m_VerticesNb;};

    void setPrimOpenGL(GLenum prim) { m_primOpenGL = prim; };
};


class Plane: public Mesh 
{

    public:
    Plane(ShaderProgram pgrm, int size_edge=128, std::vector<bool> shared = {true, true, false}): Mesh(pgrm, Plane::init_mesh(size_edge), shared), m_N(size_edge)
    {}

    static Data init_mesh(int &N_) {
        std::vector<glm::vec3> vertices;
        std::vector<glm::vec3> normals;
        std::vector<glm::vec2> uv;
        std::vector<GLuint> indices;
    

        for (int j = 0; j < N_; j++)
        {
            for (int i = 0; i<N_; i++)
            {
                // filling the buffers column-wise <!> => buff = [column1, column 2, column3...]
                vertices.push_back(glm::vec3((float) j, 0, (float) i));
                normals.push_back(glm::vec3(0.0, 1.0, 0.0));
                uv.push_back(glm::vec2((float) i/N_, (float) j/N_));
            }
        }

        int N_minus_1 = N_-1;
        // int temp = N*N_minus_1;
        // vertices[temp].y -= 50.0;
        for (int j = 0; j< N_minus_1; j++)
        {
            for (int i = 0; i<N_minus_1; i++)
            {
                int id = j*N_+i; // i = z-axis (OpenGL) => ROWS INDEX  != j = x-axis => COLUMN INDEX
                // filling counter-clock wise triagles inside ebo <!>

                indices.push_back(id+1); // bottom left corner
                indices.push_back(id+N_+1); // bottom right corner
                indices.push_back(id); // top right corner

                indices.push_back(id); // top left corner
                indices.push_back(id+N_+1); // bottom right corner
                indices.push_back(id+N_); // top right corner

            }
        }


        Data new_data = {vertices, normals, uv, indices}; 
        return new_data;
    };

    unsigned int N() {return m_N;};

    unsigned int *ptrN() {return &m_N;};

    private:
    unsigned int m_N;
};

class Sphere : public Mesh 
{
    private:
    float m_radius;

    public:

    Sphere(ShaderProgram pgrm, std::vector<bool> shared = {true, false, false}): 
    Mesh(pgrm, Sphere::init_mesh(), shared), 
    m_radius(10.0f)
    {}
    
    static glm::vec3 spherical_coords(float &r, float &th, float &phi)
    {
        //spherical coordinates when y is the up axis (OpenGL referential)
        float cos_phi = cos(phi);
        return glm::vec3(r*cos_phi*cos(th), r*sin(phi), r*cos_phi*sin(th));
    }

    float radius() {return m_radius;};

    static Data init_mesh()
    {
        float r = 10.0f;
        int rowCount = 50;
        int columnCount = 50;
        std::vector<glm::vec3> vertices;
        std::vector<glm::vec3> normals;
        std::vector<glm::vec2> uv;
        std::vector<GLuint> indices;
        float PI = 3.14159265;
        float ratio_row  = PI/rowCount;
        float ratio_column = 2.0*PI/columnCount;

        float phi = PI/2.0;
        float th = 0.0;


        
        for (int i=0; i<rowCount-1; i++)
        {
            phi -=ratio_row;

            for (int j = 0; j<columnCount; j++)
            {
                // inserting each vertex one time
                vertices.push_back(Sphere::spherical_coords(r, th, phi));
                normals.push_back(Sphere::spherical_coords(r, th, phi)); // n = OM vector
                uv.push_back(glm::vec2(1.0 - phi/PI, th/(2.0*PI)));
                th += ratio_column;
            }
        }
        vertices.push_back(glm::vec3(0.0, -r, 0.0)); // bottom vertex
        vertices.push_back(glm::vec3(0.0, r, 0.0)); // top vertex


        // top and bottom single triangles
        int top_vtx = vertices.size() - 1;
        int bottom_vtx = vertices.size() - 2;
        int b_idx = bottom_vtx - columnCount;
        int modulo = (columnCount-1)*(columnCount-1);
        for (int k = 0; k<columnCount; k++)
        {
            indices.push_back((k+1)%columnCount);
            indices.push_back(k);
            indices.push_back(top_vtx);

            if (k== (columnCount - 1)) indices.push_back(bottom_vtx - columnCount);
            else indices.push_back(b_idx+1);
            indices.push_back(bottom_vtx);
            indices.push_back(b_idx);
            b_idx++;
        }

        // stack triangles
        for (int i = 0; i<rowCount-2; i++)
        {
            for (int j = 0.0; j<columnCount; j++)
            {
                int idx = i*columnCount+j; // vertex (i, j)
                if (j==(columnCount-1)) indices.push_back(idx+1-columnCount);
                else indices.push_back(idx+1);
                indices.push_back(idx+columnCount);
                indices.push_back(idx);

                if (j==(columnCount-1)) indices.push_back(idx+1);
                else indices.push_back(idx + columnCount+1);
                indices.push_back(idx+columnCount);
                if (j==(columnCount-1)) indices.push_back(idx+1-columnCount);
                else indices.push_back(idx+1);
            }
        }

        Data new_data = {vertices, normals, uv, indices}; 
        return new_data;
    }
};

#endif